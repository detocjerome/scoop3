package fr.ifremer.scoop3.core.report.validation.model;

import java.util.List;

import org.jdom2.Element;

import fr.ifremer.scoop3.core.report.validation.model.StepItem.ITEM_STATE;
import fr.ifremer.scoop3.infra.logger.SC3Logger;

/**
 *
 * @author Altran
 *
 */
public class MessageItem extends AbstractReportItem {

    /**
     *
     */
    private static final long serialVersionUID = -137850077985720196L;

    private static final String XML_ELEMENT_MESSAGE = "message";
    protected static final String XML_ATTRIBUTE_STATE = "state";
    protected static final String XML_ELEMENT_DETAILS = "details";

    protected String details;

    /**
     * Default constructor.
     */
    public MessageItem() {
	super();
    }

    /**
     * Create a MessageItem from an XML element (generated by getXMLTree())
     *
     * @param messageItemElt
     */
    public MessageItem(final Element messageItemElt) {
	this();
	try {
	    final ITEM_STATE itemState = ITEM_STATE.valueOf(messageItemElt.getAttributeValue(XML_ATTRIBUTE_STATE));
	    setState(itemState);
	} catch (final IllegalArgumentException iae) {
	    SC3Logger.LOGGER.error(iae.getMessage(), iae);
	}

	details = messageItemElt.getChildText(XML_ELEMENT_DETAILS);
    }

    /**
     * Constructor.
     *
     * @param state
     * @param details
     */
    public MessageItem(final ITEM_STATE state, final String details) {
	super(state);
	this.details = details;
    }

    /*
     * (non-Javadoc)
     *
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(final Object obj) {
	if (obj instanceof MessageItem) {
	    final MessageItem otherMsg = (MessageItem) obj;
	    return ((details == null) && (otherMsg.getDetails() == null))
		    || ((details != null) && details.equals(otherMsg.getDetails()));
	}
	return super.equals(obj);
    }

    /**
     * Get the details of this message.
     *
     * @return
     */
    public String getDetails() {
	return details;
    }

    /**
     * Get the DOM XML Tree of the StepItem
     *
     * @return
     */
    public Element getXMLTree() {
	final Element messageItemElt = new Element(getElementMessageTitle());
	if (getState() != null) {
	    messageItemElt.setAttribute(XML_ATTRIBUTE_STATE, String.valueOf(getState()));
	}

	final List<Element> additionnalInfo = getElementAdditionnalInfo();
	if (additionnalInfo != null) {
	    messageItemElt.addContent(additionnalInfo);
	}

	final String localDetails = getDetails();
	if (localDetails != null) {
	    final Element detailsElt = new Element(XML_ELEMENT_DETAILS);
	    detailsElt.addContent(localDetails);
	    messageItemElt.addContent(detailsElt);
	}

	return messageItemElt;
    }

    /**
     * Set the details of this message.
     *
     * @param details
     */
    public void setDetails(final String details) {
	this.details = details;
    }

    /**
     * @return optional info to add to the XML Element
     */
    protected List<Element> getElementAdditionnalInfo() {
	return null;
    }

    /**
     * @return the name of the XML Element
     */
    protected String getElementMessageTitle() {
	return XML_ELEMENT_MESSAGE;
    }

}
